# Multi-stage build for production Python workers
FROM python:3.11-slim AS base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements
COPY requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Build stage for GPU workers
FROM base AS gpu-builder

# Install CUDA dependencies (for GPU workers)
RUN apt-get update && apt-get install -y \
    cuda-toolkit-12-0 \
    && rm -rf /var/lib/apt/lists/*

# Install GPU-specific Python packages
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

# Production stage
FROM base AS production

# Create non-root user
RUN groupadd -r worker && useradd -r -g worker worker

# Install dumb-init for proper signal handling
RUN apt-get update && apt-get install -y dumb-init && rm -rf /var/lib/apt/lists/*

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/logs /app/temp /app/models && \
    chown -R worker:worker /app

# Security hardening
RUN apt-get update && apt-get install -y \
    tini \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && chmod -R 755 /app \
    && chmod -R 1777 /app/temp

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1

# Switch to non-root user
USER worker

# Expose port
EXPOSE 8000

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the worker (will be overridden by specific worker)
CMD ["python", "main.py"]
